library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
"There is an error - y var is not categorical or numerical."
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(maxfunctions)
library(readxl)
ComparingGlaucInHighMyopes <- read_excel("~/Dropbox/SERI/Pupillometry Data/SUMMER 2019 DATA/CompiledAnalysisFiles/ComparingGlaucInHighMyopes.xlsx",
sheet = "WHOClassified")
View(ComparingGlaucInHighMyopes)
df_to_analyze<-ComparingGlaucInHighMyopes
x_var<-"Myopia"
y_vars<-c("CataractStatusDetailed")
sd=3
#Start output table with column names according to x_var
output_table<-data.frame()
x_groups<-names(table(df_to_analyze[[x_var]]))
#Add counts to column names and define output_table_col_names
output_table_col_names<-c("Demographic Characteristics")
counts<-table(df_to_analyze[[x_var]])
for (i in 1:length(names(counts))) {
col_name<-paste(names(counts)[i]," (n=",counts[i],")",sep="")
output_table_col_names<-c(output_table_col_names,col_name)
}
y_var<-"CataractStatusDetailed"
require(maxfunctions)
df_to_analyze_without_na<-remove.rows.with.na.in.specified.column(df_to_analyze,c(x_var,y_var))
#y_var is a chr
#Count number of groups
number_of_y_groups<-length(unique(df_to_analyze_without_na[[y_var]]))
print(paste(y_var,"is a categorical/ordinal variable with",number_of_y_groups,"levels."),quote=F)
#Create blank first output row with y_var
#note output_row will actually be multiple rows in this case; otherwise is 1 row
output_row<-c(y_var,rep("",length(x_groups)))
names(output_row)<-output_table_col_names
names(table(df_to_analyze_without_na[[y_var]]))[order(table(df_to_analyze_without_na[[y_var]]),decreasing = T)]
for (j in 1:number_of_y_groups) {
#Select y_group values based on descending order of counts
y_group<-names(table(df_to_analyze_without_na[[y_var]]))[order(table(df_to_analyze_without_na[[y_var]]),decreasing = T)][j]
#Calculate counts and proportions of y_group for each x_group, then add to row
row_to_add<-c(paste(y_group,", no. (%)",sep = ""))
for (k in 1:length(x_groups)) {
x_group<-x_groups[k]
x_group_df<-df_to_analyze_without_na[df_to_analyze_without_na[[x_var]]==x_group,]
#For that x_group, calculate the count and proportion of y_group in y_var
y_group_count<-table(x_group_df[[y_var]])[[y_group]]
y_group_proportion<-sprintf('%.1f',100*table(x_group_df[[y_var]])[[y_group]]/sum(table(x_group_df[[y_var]])))
y_group_description<-paste(y_group_count," (",y_group_proportion,")",sep = "")
row_to_add<-c(row_to_add,y_group_description)
}
#Add the row to output_row
names(row_to_add)<-output_table_col_names
output_row<-rbind(output_row,row_to_add)
}
View(output_row)
names(table(df_to_analyze_without_na[[y_var]]))[order(table(df_to_analyze_without_na[[y_var]]),decreasing = T)]
j<-2
#Select y_group values based on descending order of counts
y_group<-names(table(df_to_analyze_without_na[[y_var]]))[order(table(df_to_analyze_without_na[[y_var]]),decreasing = T)][j]
y_group
row_to_add<-c(paste(y_group,", no. (%)",sep = ""))
row_to_add
x_groups
k<-1
x_group<-x_groups[k]
x_group
x_group_df<-df_to_analyze_without_na[df_to_analyze_without_na[[x_var]]==x_group,]
x_group_df
y_group_count<-table(x_group_df[[y_var]])[[y_group]]
x_group_df[[y_var]]
table(x_group_df[[y_var]])[[y_group]]
x_group_df[[y_var]]
x_group_df[[y_var]]==y_group
sum(x_group_df[[y_var]]==y_group)
for (k in 1:length(x_groups)) {
x_group<-x_groups[k]
x_group_df<-df_to_analyze_without_na[df_to_analyze_without_na[[x_var]]==x_group,]
#For that x_group, calculate the count and proportion of y_group in y_var
y_group_count<-sum(x_group_df[[y_var]]==y_group)
y_group_proportion<-sprintf('%.1f',100*sum(x_group_df[[y_var]]==y_group)/sum(table(x_group_df[[y_var]])))
y_group_description<-paste(y_group_count," (",y_group_proportion,")",sep = "")
row_to_add<-c(row_to_add,y_group_description)
}
#Add the row to output_row
names(row_to_add)<-output_table_col_names
output_row<-rbind(output_row,row_to_add)
output_row
#Add a row for each level of y_var showing % within each x group
for (j in 1:number_of_y_groups) {
#Select y_group values based on descending order of counts
y_group<-names(table(df_to_analyze_without_na[[y_var]]))[order(table(df_to_analyze_without_na[[y_var]]),decreasing = T)][j]
#Calculate counts and proportions of y_group for each x_group, then add to row
row_to_add<-c(paste(y_group,", no. (%)",sep = ""))
for (k in 1:length(x_groups)) {
x_group<-x_groups[k]
x_group_df<-df_to_analyze_without_na[df_to_analyze_without_na[[x_var]]==x_group,]
#For that x_group, calculate the count and proportion of y_group in y_var
y_group_count<-sum(x_group_df[[y_var]]==y_group)
y_group_proportion<-sprintf('%.1f',100*sum(x_group_df[[y_var]]==y_group)/sum(table(x_group_df[[y_var]])))
y_group_description<-paste(y_group_count," (",y_group_proportion,")",sep = "")
row_to_add<-c(row_to_add,y_group_description)
}
#Add the row to output_row
names(row_to_add)<-output_table_col_names
output_row<-rbind(output_row,row_to_add)
}
output_row
library(maxfunctions)
